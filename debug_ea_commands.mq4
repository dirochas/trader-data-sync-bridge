//+------------------------------------------------------------------+
//|                                           TradingDataSender.mq4 |
//|                                                                  |
//+------------------------------------------------------------------+
#property strict

input string ServerURL = "https://kgrlcsimdszbrkcwjpke.supabase.co/functions/v1/trading-data";
input int SendIntervalSeconds = 5; // Intervalo de envio (segundos)
input bool UseTimer = true; // true = OnTimer (sem ticks), false = OnTick (com ticks)

// NOVAS VARI√ÅVEIS PARA POLLING DE COMANDOS
input bool EnableCommandPolling = true; // Habilitar polling de comandos
input int CommandCheckIntervalSeconds = 10; // Intervalo para verificar comandos (segundos)

datetime lastSendTime = 0;
datetime lastCommandCheck = 0;

//+------------------------------------------------------------------+
int OnInit()
{
   Print("=== EA TRADING DATA SENDER INICIADO ===");
   Print("URL do servidor: ", ServerURL);
   Print("Intervalo de envio: ", SendIntervalSeconds, " segundos");
   Print("Modo selecionado: ", UseTimer ? "TIMER (sem ticks)" : "TICK (com ticks)");
   Print("Polling de comandos: ", EnableCommandPolling ? "HABILITADO" : "DESABILITADO");
   
   if(UseTimer)
   {
      EventSetTimer(SendIntervalSeconds);
      Print("‚úÖ Timer configurado para ", SendIntervalSeconds, " segundos");
      Print("üì° EA funcionar√° mesmo com mercado FECHADO");
   }
   else
   {
      Print("üìä EA funcionar√° apenas com mercado ABERTO (ticks)");
   }
   
   // Enviar dados imediatamente na inicializa√ß√£o
   Print("Enviando dados iniciais...");
   SendTradingData();
   
   return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   if(UseTimer)
   {
      EventKillTimer();
      Print("Timer finalizado");
   }
   Print("=== EA FINALIZADO ===");
}

//+------------------------------------------------------------------+
void OnTick()
{
   // S√≥ funciona se UseTimer = false
   if(!UseTimer && TimeCurrent() - lastSendTime >= SendIntervalSeconds)
   {
      Print("OnTick executado - enviando dados...");
      SendTradingData();
      lastSendTime = TimeCurrent();
   }
}

//+------------------------------------------------------------------+
void SendTradingData()
{
   Print("--- Iniciando coleta de dados ---");
   string jsonData = BuildJsonData();
   
   // Debug - salvar em arquivo
   int file = FileOpen("trading_data.json", FILE_WRITE|FILE_TXT);
   if(file != INVALID_HANDLE)
   {
      FileWrite(file, jsonData);
      FileClose(file);
      Print("üíæ Dados salvos em arquivo: trading_data.json");
   }
   else
   {
      Print("‚ùå Erro ao salvar arquivo de debug");
   }
   
   // Enviar via HTTP para Supabase
   SendToSupabase(jsonData);
}

//+------------------------------------------------------------------+
void SendToSupabase(string jsonData)
{
   Print("=== INICIANDO ENVIO PARA SUPABASE ===");
   Print("üåê URL: ", ServerURL);
   Print("üì¶ Tamanho dos dados: ", StringLen(jsonData), " caracteres");
   
   string headers = "Content-Type: application/json\r\n";
   
   char post[];
   char result[];
   string resultHeaders;
   
   // Converter string para array de bytes
   StringToCharArray(jsonData, post, 0, WHOLE_ARRAY);
   ArrayResize(post, ArraySize(post) - 1); // Remove null terminator
   
   Print("üöÄ Fazendo requisi√ß√£o HTTP POST...");
   
   // Fazer requisi√ß√£o HTTP POST
   int timeout = 10000; // 10 segundos (aumentei o timeout)
   int res = WebRequest("POST", ServerURL, headers, timeout, post, result, resultHeaders);
   
   Print("üì° C√≥digo de resposta HTTP: ", res);
   
   if(res == 200)
   {
      Print("‚úÖ SUCESSO! Dados enviados para Supabase!");
      string response = CharArrayToString(result);
      Print("üìã Resposta do servidor: ", response);
   }
   else if(res == -1)
   {
      Print("‚ùå ERRO: URL n√£o permitida no WebRequest!");
      Print("üîß SOLU√á√ÉO: Adicione esta URL nas configura√ß√µes:");
      Print("   Ferramentas ‚Üí Op√ß√µes ‚Üí Expert Advisors ‚Üí WebRequest");
      Print("   URL: https://kgrlcsimdszbrkcwjpke.supabase.co");
   }
   else if(res == 0)
   {
      Print("‚ùå ERRO: Timeout ou sem conex√£o com internet");
      Print("üîß Verifique sua conex√£o com a internet");
   }
   else
   {
      Print("‚ùå Erro HTTP: ", res);
      Print("üìã Headers de resposta: ", resultHeaders);
      if(ArraySize(result) > 0)
      {
         string errorResponse = CharArrayToString(result);
         Print("üìã Resposta de erro: ", errorResponse);
      }
   }
   
   Print("=== FIM DO ENVIO ===");
}

//+------------------------------------------------------------------+
string BuildJsonData()
{
   Print("üîÑ Construindo dados JSON...");
   
   string json = "{";
   
   // Account Info
   json += "\"account\":{";
   json += "\"balance\":" + DoubleToString(AccountBalance(), 2) + ",";
   json += "\"equity\":" + DoubleToString(AccountEquity(), 2) + ",";
   json += "\"profit\":" + DoubleToString(AccountProfit(), 2) + ",";
   json += "\"accountNumber\":\"" + IntegerToString(AccountNumber()) + "\",";
   json += "\"server\":\"" + AccountServer() + "\",";
   json += "\"leverage\":" + IntegerToString(AccountLeverage());
   json += "},";
   
   Print("üí∞ Conta: ", AccountNumber(), " | Balance: $", DoubleToString(AccountBalance(), 2));
   
   // Margin Info
   json += "\"margin\":{";
   json += "\"used\":" + DoubleToString(AccountMargin(), 2) + ",";
   json += "\"free\":" + DoubleToString(AccountFreeMargin(), 2) + ",";
   json += "\"level\":" + DoubleToString(AccountMargin() == 0 ? 0 : AccountEquity()/AccountMargin()*100, 2);
   json += "},";
   
   Print("üìä Margem: Usada $", DoubleToString(AccountMargin(), 2), " | Livre $", DoubleToString(AccountFreeMargin(), 2));
   
   // Open Positions
   json += "\"positions\":[";
   int posCount = 0;
   for(int i = 0; i < OrdersTotal(); i++)
   {
      if(OrderSelect(i, SELECT_BY_POS) && OrderType() <= 1) // Only BUY/SELL
      {
         if(posCount > 0) json += ",";
         json += "{";
         json += "\"ticket\":" + IntegerToString(OrderTicket()) + ",";
         json += "\"symbol\":\"" + OrderSymbol() + "\",";
         json += "\"type\":\"" + (OrderType() == OP_BUY ? "BUY" : "SELL") + "\",";
         json += "\"volume\":" + DoubleToString(OrderLots(), 2) + ",";
         json += "\"openPrice\":" + DoubleToString(OrderOpenPrice(), 5) + ",";
         json += "\"currentPrice\":" + DoubleToString(OrderType() == OP_BUY ? MarketInfo(OrderSymbol(), MODE_BID) : MarketInfo(OrderSymbol(), MODE_ASK), 5) + ",";
         json += "\"profit\":" + DoubleToString(OrderProfit(), 2) + ",";
         json += "\"openTime\":\"" + TimeToString(OrderOpenTime()) + "\"";
         json += "}";
         posCount++;
      }
   }
   json += "],";
   
   Print("üìà Posi√ß√µes abertas: ", posCount);
   
   // Trade History (√∫ltimos 10)
   json += "\"history\":[";
   int histCount = 0;
   for(int i = OrdersHistoryTotal()-1; i >= 0 && histCount < 10; i--)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_HISTORY) && OrderType() <= 1)
      {
         if(histCount > 0) json += ",";
         json += "{";
         json += "\"ticket\":" + IntegerToString(OrderTicket()) + ",";
         json += "\"symbol\":\"" + OrderSymbol() + "\",";
         json += "\"type\":\"" + (OrderType() == OP_BUY ? "BUY" : "SELL") + "\",";
         json += "\"volume\":" + DoubleToString(OrderLots(), 2) + ",";
         json += "\"openPrice\":" + DoubleToString(OrderOpenPrice(), 5) + ",";
         json += "\"closePrice\":" + DoubleToString(OrderClosePrice(), 5) + ",";
         json += "\"profit\":" + DoubleToString(OrderProfit(), 2) + ",";
         json += "\"openTime\":\"" + TimeToString(OrderOpenTime()) + "\",";
         json += "\"closeTime\":\"" + TimeToString(OrderCloseTime()) + "\"";
         json += "}";
         histCount++;
      }
   }
   json += "]";
   
   json += "}";
   
   Print("üìú Hist√≥rico de trades: ", histCount);
   Print("‚úÖ JSON constru√≠do com sucesso");
   
   return json;
}

//+------------------------------------------------------------------+
void OnTimer()
{
   // S√≥ funciona se UseTimer = true
   if(UseTimer)
   {
      Print("=== TIMER EXECUTADO ===");
      Print("Hor√°rio atual: ", TimeToString(TimeCurrent()));
      SendTradingData();
      lastSendTime = TimeCurrent();
      
      // NOVA FUNCIONALIDADE: Verificar comandos pendentes
      if(EnableCommandPolling && TimeCurrent() - lastCommandCheck >= CommandCheckIntervalSeconds)
      {
         Print("üîç Iniciando verifica√ß√£o de comandos...");
         Print("‚è∞ √öltima verifica√ß√£o: ", TimeToString(lastCommandCheck));
         Print("‚è∞ Agora: ", TimeToString(TimeCurrent()));
         Print("‚è∞ Diferen√ßa: ", TimeCurrent() - lastCommandCheck, " segundos");
         CheckPendingCommands();
         lastCommandCheck = TimeCurrent();
      }
      else
      {
         Print("‚è≥ Aguardando pr√≥xima verifica√ß√£o de comandos em: ", CommandCheckIntervalSeconds - (TimeCurrent() - lastCommandCheck), " segundos");
      }
   }
}

//+------------------------------------------------------------------+
// FUN√á√ÉO MELHORADA: Verificar comandos pendentes
//+------------------------------------------------------------------+
void CheckPendingCommands()
{
   Print("üîç === INICIANDO VERIFICA√á√ÉO DE COMANDOS ===");
   Print("üì± Conta: ", AccountNumber());
   
   string url = "https://kgrlcsimdszbrkcwjpke.supabase.co/functions/v1/get-commands?accountNumber=" + IntegerToString(AccountNumber());
   Print("üåê URL da requisi√ß√£o: ", url);
   
   string headers = "Content-Type: application/json\r\n";
   
   char result[];
   string resultHeaders;
   
   // CORRE√á√ÉO: Usar array vazio para requisi√ß√£o GET
   char emptyPost[];
   
   Print("üöÄ Fazendo requisi√ß√£o GET...");
   int res = WebRequest("GET", url, headers, 5000, emptyPost, result, resultHeaders);
   
   Print("üì° C√≥digo de resposta HTTP: ", res);
   Print("üìã Headers de resposta: ", resultHeaders);
   
   if(res == 200)
   {
      string response = CharArrayToString(result);
      Print("‚úÖ SUCESSO na requisi√ß√£o!");
      Print("üìã Resposta completa: ", response);
      Print("üìè Tamanho da resposta: ", StringLen(response), " caracteres");
      
      // Verificar se existe o campo "commands" na resposta
      if(StringFind(response, "\"commands\"") >= 0)
      {
         Print("üì¶ Campo 'commands' encontrado na resposta");
         
         // Verificar se existem comandos
         if(StringFind(response, "\"commands\":[]") >= 0)
         {
            Print("üì≠ Nenhum comando pendente encontrado");
         }
         else
         {
            Print("üì¨ Comandos encontrados! Processando...");
            
            // Verificar especificamente por CLOSE_ALL
            if(StringFind(response, "CLOSE_ALL") >= 0)
            {
               Print("‚ö° COMANDO CLOSE_ALL ENCONTRADO!");
               ExecuteCloseAllCommand(response);
            }
            else
            {
               Print("‚ÑπÔ∏è Outros comandos encontrados, mas n√£o CLOSE_ALL");
            }
         }
      }
      else
      {
         Print("‚ö†Ô∏è Campo 'commands' n√£o encontrado na resposta");
         Print("üîç Verificando formato da resposta...");
      }
   }
   else if(res == -1)
   {
      Print("‚ùå ERRO: URL n√£o permitida no WebRequest!");
      Print("üîß SOLU√á√ÉO: Adicione estas URLs nas configura√ß√µes do MetaTrader:");
      Print("   Ferramentas ‚Üí Op√ß√µes ‚Üí Expert Advisors ‚Üí WebRequest");
      Print("   URL 1: https://kgrlcsimdszbrkcwjpke.supabase.co");
      Print("   URL 2: *.supabase.co");
   }
   else if(res == 0)
   {
      Print("‚ùå ERRO: Timeout ou sem conex√£o");
   }
   else
   {
      Print("‚ùå Erro HTTP: ", res);
      if(ArraySize(result) > 0)
      {
         string errorResponse = CharArrayToString(result);
         Print("üìã Resposta de erro: ", errorResponse);
      }
   }
   
   Print("üîç === FIM DA VERIFICA√á√ÉO DE COMANDOS ===");
}

//+------------------------------------------------------------------+
// FUN√á√ÉO MELHORADA: Executar comando CLOSE_ALL
//+------------------------------------------------------------------+
void ExecuteCloseAllCommand(string jsonResponse)
{
   Print("üöÄ === EXECUTANDO CLOSE_ALL ===");
   
   // Extrair ID do comando (parsing simples)
   string commandId = ExtractCommandId(jsonResponse);
   Print("üÜî ID do comando extra√≠do: ", commandId);
   
   int totalOrders = OrdersTotal();
   Print("üìä Total de ordens antes do fechamento: ", totalOrders);
   
   int closedCount = 0;
   int failedCount = 0;
   
   // Fechar todas as posi√ß√µes abertas
   for(int i = totalOrders - 1; i >= 0; i--)
   {
      Print("üîÑ Processando ordem √≠ndice: ", i);
      
      if(OrderSelect(i, SELECT_BY_POS))
      {
         Print("üìã Order selecionada:");
         Print("   Ticket: ", OrderTicket());
         Print("   Tipo: ", OrderType());
         Print("   Symbol: ", OrderSymbol());
         Print("   Volume: ", OrderLots());
         
         if(OrderType() <= 1) // Only BUY/SELL
         {
            Print("üíº Tentando fechar posi√ß√£o...");
            bool closed = false;
            
            if(OrderType() == OP_BUY)
            {
               double bid = MarketInfo(OrderSymbol(), MODE_BID);
               Print("   Fechando BUY com BID: ", bid);
               closed = OrderClose(OrderTicket(), OrderLots(), bid, 3);
            }
            else if(OrderType() == OP_SELL)
            {
               double ask = MarketInfo(OrderSymbol(), MODE_ASK);
               Print("   Fechando SELL com ASK: ", ask);
               closed = OrderClose(OrderTicket(), OrderLots(), ask, 3);
            }
            
            if(closed)
            {
               closedCount++;
               Print("‚úÖ Posi√ß√£o fechada com sucesso: ", OrderTicket());
            }
            else
            {
               failedCount++;
               int error = GetLastError();
               Print("‚ùå ERRO ao fechar posi√ß√£o: ", OrderTicket());
               Print("   C√≥digo do erro: ", error);
               Print("   Descri√ß√£o: ", ErrorDescription(error));
            }
         }
         else
         {
            Print("‚è≠Ô∏è Pulando ordem (n√£o √© BUY/SELL): tipo ", OrderType());
         }
      }
      else
      {
         Print("‚ùå Erro ao selecionar ordem no √≠ndice: ", i);
      }
   }
   
   Print("üìä === RESULTADO FINAL CLOSE_ALL ===");
   Print("‚úÖ Posi√ß√µes fechadas: ", closedCount);
   Print("‚ùå Posi√ß√µes falharam: ", failedCount);
   Print("üìä Total processado: ", closedCount + failedCount);
   
   // Atualizar status do comando
   if(commandId != "")
   {
      if(failedCount == 0)
      {
         UpdateCommandStatus(commandId, "EXECUTED", "");
      }
      else
      {
         UpdateCommandStatus(commandId, "FAILED", "Algumas posi√ß√µes falharam ao fechar");
      }
   }
   else
   {
      Print("‚ö†Ô∏è ID do comando n√£o encontrado - status n√£o ser√° atualizado");
   }
}

//+------------------------------------------------------------------+
// FUN√á√ÉO MELHORADA: Extrair ID do comando
//+------------------------------------------------------------------+
string ExtractCommandId(string jsonResponse)
{
   Print("üîç Extraindo ID do comando...");
   Print("üìã JSON para an√°lise: ", jsonResponse);
   
   // Buscar por "id":"..." no JSON
   int idPos = StringFind(jsonResponse, "\"id\":\"");
   if(idPos >= 0)
   {
      Print("‚úÖ Padr√£o 'id' encontrado na posi√ß√£o: ", idPos);
      idPos += 6; // Pular "id":"
      int endPos = StringFind(jsonResponse, "\"", idPos);
      if(endPos > idPos)
      {
         string commandId = StringSubstr(jsonResponse, idPos, endPos - idPos);
         Print("üÜî ID extra√≠do: ", commandId);
         return commandId;
      }
      else
      {
         Print("‚ùå N√£o foi poss√≠vel encontrar o fim do ID");
      }
   }
   else
   {
      Print("‚ùå Padr√£o 'id' n√£o encontrado no JSON");
   }
   return "";
}

//+------------------------------------------------------------------+
// FUN√á√ÉO MELHORADA: Atualizar status do comando
//+------------------------------------------------------------------+
void UpdateCommandStatus(string commandId, string status, string errorMessage)
{
   Print("üì§ === ATUALIZANDO STATUS DO COMANDO ===");
   Print("üÜî Command ID: ", commandId);
   Print("üìä Status: ", status);
   Print("‚ùå Error Message: ", errorMessage);
   
   string url = "https://kgrlcsimdszbrkcwjpke.supabase.co/functions/v1/update-command-status";
   string headers = "Content-Type: application/json\r\n";
   
   string jsonData = "{";
   jsonData += "\"commandId\":\"" + commandId + "\",";
   jsonData += "\"status\":\"" + status + "\"";
   if(errorMessage != "")
   {
      jsonData += ",\"errorMessage\":\"" + errorMessage + "\"";
   }
   jsonData += "}";
   
   Print("üì¶ Dados a enviar: ", jsonData);
   
   char post[];
   char result[];
   string resultHeaders;
   
   StringToCharArray(jsonData, post, 0, WHOLE_ARRAY);
   ArrayResize(post, ArraySize(post) - 1);
   
   int res = WebRequest("POST", url, headers, 5000, post, result, resultHeaders);
   
   Print("üì° C√≥digo de resposta: ", res);
   
   if(res == 200)
   {
      string response = CharArrayToString(result);
      Print("‚úÖ Status atualizado com sucesso!");
      Print("üìã Resposta: ", response);
   }
   else
   {
      Print("‚ùå Erro ao atualizar status. C√≥digo: ", res);
      if(ArraySize(result) > 0)
      {
         string errorResponse = CharArrayToString(result);
         Print("üìã Resposta de erro: ", errorResponse);
      }
   }
}

//+------------------------------------------------------------------+
// FUN√á√ÉO AUXILIAR: Descri√ß√£o de erros
//+------------------------------------------------------------------+
string ErrorDescription(int error_code)
{
   switch(error_code)
   {
      case 0:    return "Sem erro";
      case 1:    return "Sem erro, mas resultado desconhecido";
      case 2:    return "Erro comum";
      case 3:    return "Par√¢metros inv√°lidos";
      case 4:    return "Servidor de negocia√ß√£o ocupado";
      case 5:    return "Vers√£o antiga do terminal cliente";
      case 6:    return "Sem conex√£o com o servidor de negocia√ß√£o";
      case 7:    return "N√£o h√° direitos suficientes";
      case 8:    return "Frequ√™ncia muito alta de solicita√ß√µes";
      case 9:    return "Opera√ß√£o malformada";
      case 64:   return "Conta desabilitada";
      case 65:   return "N√∫mero de conta inv√°lido";
      case 128:  return "Tempo limite de negocia√ß√£o expirado";
      case 129:  return "Pre√ßo inv√°lido";
      case 130:  return "Stops inv√°lidos";
      case 131:  return "Volume inv√°lido";
      case 132:  return "Mercado fechado";
      case 133:  return "Negocia√ß√£o desabilitada";
      case 134:  return "Dinheiro insuficiente";
      case 135:  return "Pre√ßo mudou";
      case 136:  return "Broker ocupado";
      case 137:  return "Broker ocupado";
      case 138:  return "Nova cota√ß√£o";
      case 139:  return "Ordem bloqueada";
      case 140:  return "Permitido apenas compra";
      case 141:  return "Muitas solicita√ß√µes";
      case 145:  return "Modifica√ß√£o negada porque ordem muito pr√≥xima ao mercado";
      case 146:  return "Sistema de negocia√ß√£o ocupado";
      case 147:  return "Uso de data de expira√ß√£o de ordem negado pelo broker";
      case 148:  return "N√∫mero de ordens abertas e pendentes chegou ao limite";
      default:   return "Erro desconhecido #" + IntegerToString(error_code);
   }
}
